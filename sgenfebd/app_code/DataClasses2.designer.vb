'------------------------------------------------------------------------------
' <auto-generated>
'     O código foi gerado por uma ferramenta.
'     Versão de Tempo de Execução:4.0.30319.42000
'
'     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
'     o código for gerado novamente.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="SGEDic_Loja")>  _
Partial Public Class DataClasses2DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertEmpresa(instance As Empresa)
    End Sub
  Partial Private Sub UpdateEmpresa(instance As Empresa)
    End Sub
  Partial Private Sub DeleteEmpresa(instance As Empresa)
    End Sub
  Partial Private Sub InsertGeraXML(instance As GeraXML)
    End Sub
  Partial Private Sub UpdateGeraXML(instance As GeraXML)
    End Sub
  Partial Private Sub DeleteGeraXML(instance As GeraXML)
    End Sub
  Partial Private Sub InsertVersao(instance As Versao)
    End Sub
  Partial Private Sub UpdateVersao(instance As Versao)
    End Sub
  Partial Private Sub DeleteVersao(instance As Versao)
    End Sub
  Partial Private Sub InsertControle(instance As Controle)
    End Sub
  Partial Private Sub UpdateControle(instance As Controle)
    End Sub
  Partial Private Sub DeleteControle(instance As Controle)
    End Sub
  #End Region
	
	Public Sub New()
        MyBase.New(sgenfebd4.My.MySettings.Default.SGEDic_LojaConnectionString, mappingSource)
        OnCreated()
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Empresas() As System.Data.Linq.Table(Of Empresa)
		Get
			Return Me.GetTable(Of Empresa)
		End Get
	End Property
	
	Public ReadOnly Property GeraXMLs() As System.Data.Linq.Table(Of GeraXML)
		Get
			Return Me.GetTable(Of GeraXML)
		End Get
	End Property
	
	Public ReadOnly Property Versaos() As System.Data.Linq.Table(Of Versao)
		Get
			Return Me.GetTable(Of Versao)
		End Get
	End Property
	
	Public ReadOnly Property Controles() As System.Data.Linq.Table(Of Controle)
		Get
			Return Me.GetTable(Of Controle)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Empresas")>  _
Partial Public Class Empresa
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Codigo As Integer
	
	Private _Nome As String
	
	Private _NomeReduzido As String
	
	Private _StringConexao As String
	
	Private _Inativa As System.Nullable(Of Short)
	
	Private _SQLServer As String
	
	Private _DBOlap As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCodigoChanging(value As Integer)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnNomeChanging(value As String)
    End Sub
    Partial Private Sub OnNomeChanged()
    End Sub
    Partial Private Sub OnNomeReduzidoChanging(value As String)
    End Sub
    Partial Private Sub OnNomeReduzidoChanged()
    End Sub
    Partial Private Sub OnStringConexaoChanging(value As String)
    End Sub
    Partial Private Sub OnStringConexaoChanged()
    End Sub
    Partial Private Sub OnInativaChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnInativaChanged()
    End Sub
    Partial Private Sub OnSQLServerChanging(value As String)
    End Sub
    Partial Private Sub OnSQLServerChanged()
    End Sub
    Partial Private Sub OnDBOlapChanging(value As String)
    End Sub
    Partial Private Sub OnDBOlapChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Codigo() As Integer
		Get
			Return Me._Codigo
		End Get
		Set
			If ((Me._Codigo = value)  _
						= false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nome", DbType:="VarChar(50)")>  _
	Public Property Nome() As String
		Get
			Return Me._Nome
		End Get
		Set
			If (String.Equals(Me._Nome, value) = false) Then
				Me.OnNomeChanging(value)
				Me.SendPropertyChanging
				Me._Nome = value
				Me.SendPropertyChanged("Nome")
				Me.OnNomeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NomeReduzido", DbType:="VarChar(20)")>  _
	Public Property NomeReduzido() As String
		Get
			Return Me._NomeReduzido
		End Get
		Set
			If (String.Equals(Me._NomeReduzido, value) = false) Then
				Me.OnNomeReduzidoChanging(value)
				Me.SendPropertyChanging
				Me._NomeReduzido = value
				Me.SendPropertyChanged("NomeReduzido")
				Me.OnNomeReduzidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StringConexao", DbType:="VarChar(255)")>  _
	Public Property StringConexao() As String
		Get
			Return Me._StringConexao
		End Get
		Set
			If (String.Equals(Me._StringConexao, value) = false) Then
				Me.OnStringConexaoChanging(value)
				Me.SendPropertyChanging
				Me._StringConexao = value
				Me.SendPropertyChanged("StringConexao")
				Me.OnStringConexaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inativa", DbType:="SmallInt")>  _
	Public Property Inativa() As System.Nullable(Of Short)
		Get
			Return Me._Inativa
		End Get
		Set
			If (Me._Inativa.Equals(value) = false) Then
				Me.OnInativaChanging(value)
				Me.SendPropertyChanging
				Me._Inativa = value
				Me.SendPropertyChanged("Inativa")
				Me.OnInativaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SQLServer", DbType:="VarChar(50)")>  _
	Public Property SQLServer() As String
		Get
			Return Me._SQLServer
		End Get
		Set
			If (String.Equals(Me._SQLServer, value) = false) Then
				Me.OnSQLServerChanging(value)
				Me.SendPropertyChanging
				Me._SQLServer = value
				Me.SendPropertyChanged("SQLServer")
				Me.OnSQLServerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DBOlap", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DBOlap() As String
		Get
			Return Me._DBOlap
		End Get
		Set
			If (String.Equals(Me._DBOlap, value) = false) Then
				Me.OnDBOlapChanging(value)
				Me.SendPropertyChanging
				Me._DBOlap = value
				Me.SendPropertyChanged("DBOlap")
				Me.OnDBOlapChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GeraXML")>  _
Partial Public Class GeraXML
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _chNFe As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnchNFeChanging(value As String)
    End Sub
    Partial Private Sub OnchNFeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_chNFe", DbType:="VarChar(44) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property chNFe() As String
		Get
			Return Me._chNFe
		End Get
		Set
			If (String.Equals(Me._chNFe, value) = false) Then
				Me.OnchNFeChanging(value)
				Me.SendPropertyChanging
				Me._chNFe = value
				Me.SendPropertyChanged("chNFe")
				Me.OnchNFeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Versao")>  _
Partial Public Class Versao
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Codigo As String
	
	Private _Data As System.Nullable(Of Date)
	
	Private _Vigente As System.Nullable(Of Short)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCodigoChanging(value As String)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDataChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDataChanged()
    End Sub
    Partial Private Sub OnVigenteChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnVigenteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Codigo() As String
		Get
			Return Me._Codigo
		End Get
		Set
			If (String.Equals(Me._Codigo, value) = false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Data", DbType:="DateTime")>  _
	Public Property Data() As System.Nullable(Of Date)
		Get
			Return Me._Data
		End Get
		Set
			If (Me._Data.Equals(value) = false) Then
				Me.OnDataChanging(value)
				Me.SendPropertyChanging
				Me._Data = value
				Me.SendPropertyChanged("Data")
				Me.OnDataChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vigente", DbType:="SmallInt")>  _
	Public Property Vigente() As System.Nullable(Of Short)
		Get
			Return Me._Vigente
		End Get
		Set
			If (Me._Vigente.Equals(value) = false) Then
				Me.OnVigenteChanging(value)
				Me.SendPropertyChanging
				Me._Vigente = value
				Me.SendPropertyChanged("Vigente")
				Me.OnVigenteChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Controle")>  _
Partial Public Class Controle
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Codigo As Integer
	
	Private _Descricao As String
	
	Private _Conteudo As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCodigoChanging(value As Integer)
    End Sub
    Partial Private Sub OnCodigoChanged()
    End Sub
    Partial Private Sub OnDescricaoChanging(value As String)
    End Sub
    Partial Private Sub OnDescricaoChanged()
    End Sub
    Partial Private Sub OnConteudoChanging(value As String)
    End Sub
    Partial Private Sub OnConteudoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Codigo() As Integer
		Get
			Return Me._Codigo
		End Get
		Set
			If ((Me._Codigo = value)  _
						= false) Then
				Me.OnCodigoChanging(value)
				Me.SendPropertyChanging
				Me._Codigo = value
				Me.SendPropertyChanged("Codigo")
				Me.OnCodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descricao", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Descricao() As String
		Get
			Return Me._Descricao
		End Get
		Set
			If (String.Equals(Me._Descricao, value) = false) Then
				Me.OnDescricaoChanging(value)
				Me.SendPropertyChanging
				Me._Descricao = value
				Me.SendPropertyChanged("Descricao")
				Me.OnDescricaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Conteudo", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Conteudo() As String
		Get
			Return Me._Conteudo
		End Get
		Set
			If (String.Equals(Me._Conteudo, value) = false) Then
				Me.OnConteudoChanging(value)
				Me.SendPropertyChanging
				Me._Conteudo = value
				Me.SendPropertyChanged("Conteudo")
				Me.OnConteudoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
